@model PathNatureEcommerceCapstone.Models.DatabaseCapstone.Products

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutPageAdmin.cshtml";
}

@using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <!-- BREADCRUMBS-->
    <div class="col-md-12">

        <h1 class="d-flex d-lg-inline-flex display-5 mt-4">Edit Product</h1>
        <!-- BREADCRUMBS-->
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Dashboard", "Admin")">
                    Dashboard
                </a>
            </li>
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Products")">
                    Products
                </a>
            </li>
            <li class="breadcrumb-item active"> Edit Product</li>
        </ol>
    </div>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ProductID)

    <div class="form-group">
        @Html.LabelFor(model => model.FK_Products_CategoriesID, "FK_Products_CategoriesID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("FK_Products_CategoriesID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.FK_Products_CategoriesID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsDeleted, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsDeleted)
                @Html.ValidationMessageFor(model => model.IsDeleted, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <!-- Aggiorna il campo per l'immagine -->
    <div class="form-group">
        @Html.LabelFor(model => model.ProductImage, htmlAttributes: new { @class = "control-label col-md-2", @for = "ProductImageFile" })
        <div class="col-md-10">
            @if (!string.IsNullOrEmpty(Model.ProductImage))
            {
                <!-- Se l'immagine esiste già -->
                <img src="@Url.Content("~/Uploads/" + Model.ProductImage)" alt="Product Image" class="img-thumbnail" style="max-width: 200px;" />
                <br />
                @Html.HiddenFor(model => model.ProductImage) <!-- Aggiungi un campo nascosto per mantenere il percorso dell'immagine esistente -->
                <br />
                <!-- Aggiungi un pulsante per modificare l'immagine -->
                <input type="file" name="ProductImageFile" id="ProductImageFile" class="form-control" />
            }
            else
            {
                <!-- Se l'immagine non esiste ancora -->
                <input type="file" name="ProductImageFile" id="ProductImageFile" class="form-control" />
            }
            @Html.ValidationMessageFor(model => model.ProductImage, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Altdescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Altdescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Altdescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsFeatured, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsFeatured)
                @Html.ValidationMessageFor(model => model.IsFeatured, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

            <!-- SAVE BUTTONS -->
            <div class="form-group mt-3">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-outline-info" />
                </div>
            </div>


            <!-- ERROR MESSAGE-->
            @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.ErrorMessage
                </div>
            }


            <!-- back to list -->
            <div class="mt-5">
                <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> Back to List
                </a>
            </div>
</div>
}



